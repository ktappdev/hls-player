/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/thW6l7Hdf8j
 */
"use client";

import { Button } from "@/components/ui/button";
import { Slider } from "@/components/ui/slider";
import React, { useEffect, useRef } from "react";
import Hls from "hls.js";
export function Player() {
  const audioRef = useRef<HTMLAudioElement>(null);
  const hlsRef = useRef<Hls | null>(null);

  useEffect(() => {
    const audio = audioRef.current;
    const hls = new Hls();

    hlsRef.current = hls;
    hls.startLevel = -1;

    hls.attachMedia(audio!);
    hls.on(Hls.Events.MEDIA_ATTACHED, () => {
      // Update URL with the correct stream location
      hls.loadSource("http://localhost:8080/stream"); // adjust if needed
    });

    return () => {
      if (hlsRef.current) {
        hlsRef.current.destroy();
      }
    };
  }, []);

  return (
    <div className="p-4 rounded-lg border border-gray-200 w-full max-w-sm dark:border-gray-800 dark:border-gray-800">
      <div className="grid gap-2">
        <div className="flex items-center gap-2">
          <Button className="p-2 rounded-full" size="icon" variant="ghost">
            <PlayIcon className="w-6 h-6" />
          </Button>
          <div className="text-sm leading-none">
            <h3 className="font-semibold">Raspberry</h3>
            <p className="text-xs text-gray-500 dark:text-gray-400">Jamvino</p>
          </div>
          <div className="ml-auto flex items-center gap-2">
            <Button className="rounded-full" size="icon" variant="ghost">
              <VolumeIcon className="w-4 h-4" />
            </Button>
            <Button className="rounded-full" size="icon" variant="ghost">
              <RepeatIcon className="w-4 h-4" />
            </Button>
            <Button className="rounded-full" size="icon" variant="ghost">
              <ShuffleIcon className="w-4 h-4" />
            </Button>
          </div>
        </div>
        <div className="w-full">
          <Slider className="w-full" />
        </div>
      </div>
    </div>
  );
}

function PlayIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="5 3 19 12 5 21 5 3" />
    </svg>
  );
}

function VolumeIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5" />
    </svg>
  );
}

function RepeatIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m17 2 4 4-4 4" />
      <path d="M3 11v-1a4 4 0 0 1 4-4h14" />
      <path d="m7 22-4-4 4-4" />
      <path d="M21 13v1a4 4 0 0 1-4 4H3" />
    </svg>
  );
}

function ShuffleIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M2 18h1.4c1.3 0 2.5-.6 3.3-1.7l6.1-8.6c.7-1.1 2-1.7 3.3-1.7H22" />
      <path d="m18 2 4 4-4 4" />
      <path d="M2 6h1.9c1.5 0 2.9.9 3.6 2.2" />
      <path d="M22 18h-5.9c-1.3 0-2.6-.7-3.3-1.8l-.5-.8" />
      <path d="m18 14 4 4-4 4" />
    </svg>
  );
}
